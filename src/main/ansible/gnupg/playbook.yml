---
- name: Install and configure GnuPG
  hosts: localhost
  become: true
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install GnuPG
      apt:
        name: gnupg
        state: present

    - name: Check if GPG key exists
      shell: gpg --list-secret-keys | grep -q "Gordon Force" && echo "exists" || echo "not exists"
      register: gpg_key_exists
      changed_when: false
      become: false

    - name: Create batch file for GPG key generation
      copy:
        dest: "/tmp/gpg-key-gen.batch"
        content: |
          %echo Generating GPG key for pass
          Key-Type: RSA
          Key-Length: 4096
          Name-Real: Gordon Force
          Name-Email: gordonff@gmail.com
          Expire-Date: 0
          %no-protection
          %commit
          %echo GPG key generated
        mode: '0600'
      when: gpg_key_exists.stdout == "not exists"
      become: false

    - name: Generate GPG key
      shell: gpg --batch --generate-key /tmp/gpg-key-gen.batch
      when: gpg_key_exists.stdout == "not exists"
      become: false

    - name: Remove batch file
      file:
        path: "/tmp/gpg-key-gen.batch"
        state: absent
      when: gpg_key_exists.stdout == "not exists"
      become: false

    - name: Get GPG key ID
      shell: gpg --list-secret-keys --keyid-format LONG "Gordon Force" | grep sec | awk '{print $2}' | cut -d'/' -f2
      register: gpg_key_id
      changed_when: false
      become: false

    - name: Configure Git to use GPG key for signing
      git_config:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        scope: global
      loop:
        - { name: "user.signingkey", value: "{{ gpg_key_id.stdout }}" }
        - { name: "commit.gpgsign", value: "true" }
      become: false
      when: gpg_key_id.stdout != ""

    - name: Check if GitHub CLI is installed
      command: which gh
      register: gh_installed
      changed_when: false
      failed_when: false
      become: false

    - name: Export GPG public key
      shell: gpg --armor --export "{{ gpg_key_id.stdout }}"
      register: gpg_public_key
      changed_when: false
      become: false
      when: gpg_key_id.stdout != "" and gh_installed.rc == 0

    - name: Check if GitHub CLI is authenticated
      shell: gh auth status
      register: gh_auth_status
      changed_when: false
      failed_when: false
      become: false
      when: gpg_key_id.stdout != "" and gh_installed.rc == 0

    - name: Add GPG key to GitHub
      shell: echo "{{ gpg_public_key.stdout }}" | gh gpg-key add -
      become: false
      when: gpg_key_id.stdout != "" and gh_installed.rc == 0 and gh_auth_status.rc == 0
